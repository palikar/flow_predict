import matplotlib
import matplotlib.pyplot as plt
import os
import sys
import numpy as np

plt.style.use('ggplot')
plt.rcParams.update({'figure.max_open_warning': 0})

def reject_outliers(data, m=2):
    return data[abs(data - np.mean(data)) < m * np.std(data)]

def main():
    
    predic_single_timings = [1681,1534,1485,1582,1407,1384,1384,1430,1392,1480,1530,1535,1500,1536,1480,1409,1425,1401,1381,1403,1385,1383,1379,1372,1373,1380,1377,1367,1372,1392,1378,1393,1561,1562,1479,1368,1371,1372,1379,1377,1365,1378,1373,1367,1386,1378,1378,1373,1379,1379,1375,1372,1375,1378,1401,1401,1423,1449,1395,1393,1385,1379,1378,1372,1378,1368,1373,1378,1376,1372,1378,1379,1378,1388,1383,1372,1380,1371,1372,1384,1380,1381,1392,1382,1380,1391,1367,1405,1391,1356,1377,1373,1408,1382,1375,1383,1372,1381,1376,1387,1380,1392,1389,1375,1377,1382,1369,1377,1368,1381,1384,1382,1451,1433,1378,1372,1410,1388,1366,1377,1380,1380,1373,1366,1394,1378,1379,1379,1383,1378,1453,1538,1497,1375,1361,1376,1390,1377,1381,1358,1353,1366,1380,1379,1499,1554,1530,1374,1363,1377,1376,1357,1378,1379,1374,1381,1371,1376,1376,1390,1384,1378,1377,1357,1378,1371,1364,1395,1383,1374,1379,1371,1381,1411,1375,1392,1479,1509,1499,1383,1395,1396,1362,1362,1362,1372,1390,1381,1378,1371,1365,1373,1359,1373,1378,1377,1372,1372,1379,1378,1378,1374,1381,1384,1378,1371,1392,1399,1379,1376,1378,1379,1379,1374,1379,1374,1390,1410,1395,1357,1377,1376,1384,1371,1415,1391,1378,1377,1372,1379,1386,1369,1368,1357,1371,1378,1368,1376,1378,1495,1506,1380,1372,1364,1377,1358,1388,1377,1380,1375,1419,1527,1523,1478,1372,1393,1372,1376,1378,1378,1425,1378,1373,1379,1378,1378,1372,1378,1376,1373,1372,1373,1385,1376,1361,1498,1434,1370,1371,1362,1375,1375,1357,1376,1371,1368,1378,1362,1381,1370,1377,1377,1379,1380,1394,1384,1451,1414,1375,1371,1616,1414,1449,1417,1421,1419,1382,1481,1425,1432,1419,1423,1471,1409,1455,1460,1428,1407,1407,1460,1409,1416,1413,1503,1611,1466,1405,1427,1576,1525,1539,1601,1600,1612,1546,1522,1439,1399,1411,1424,1455,1458,1579,1617,1558,1566,1464,1449,1410,1411,1424,1413,1380,1423,1455,1451,1439,1437,1413,1455,1443,1409,1422,1435,1444,1410,1450,1405,1426,1409,1456,1436,1429,1451,1433,1408,1444,1412,1423,1431,1395,1438,1412,1404,1437,1420,1438,1428,1384,1418,1402,1470,1443,1434,1395,1394,1399,1439,1401,1389,1400,1405,1451,1453,1432,1457,1412,1447,1384,1429,1434,1430,1442,1381,1425,1410,1419,1403,1421,1414,1415,1450,1440,1442,1451,1381,1451,1408,1437,1409,1409,1395,1408,1427,1438,1442,1429,1455,1450,1416,1450,1412,1396,1399,1436,1393,1461,1451,1426,1426,1396,1397,1439,1404,1729,1452,1386,1401,1450,1456,1421,1410,1429,1552,1403,1425,1496,1407,1488,1468,1457,1400,1412,1429,1460,1483,1419,1438,1366,1445,1420,1420,1422,1418,1451,1414,1435,1526,1445,1385,1413,1437,1430,1581,1475,1370,1445,1482,1429,1436,1408,1456,1441,1411,1420,1467,1389,1420,1387,1420,1384,1439,1422,1400,1402,1396,1368,1486,1494,1462,1418,1392,1407,1395,1375,1431,1451,1381,1435,1451,1447,1432,1423,1396,1455,1408,1383,1348,1582,1595,1429,1534,1569,1596,1482,1370,1362,1413,1445,1407,1379,1431,1419,1425,1404,1412,1402,1491,1485,1458,1442,1439,1382,1362,1393,1444,1398,1439,1424,1451,1434,1433,1448,1425,1418,1380,1404,1399,1442,1451,1383,1455,1411,1434,1443,1432,1410,1428,1457,1400,1440,1384,1457,1469,1402,1389,1545,1580,1553,1587]

    hiflow_timings = [1000,2000,3000, 2500]
    
    predic_single_timings = np.array([i / 1000.0 for i in predic_single_timings])
    hiflow_timings = np.array([i / 1000.0 for i in hiflow_timings])

    # predic_single_timings = reject_outliers(predic_single_timings, 4.5)

    print('FlowPredict (mean):', np.mean(predic_single_timings))
    print('FlowPredict (max):', np.max(predic_single_timings))
    print('FlowPredict (min):', np.min(predic_single_timings))
    print('FlowPredict (std):', round(np.std(predic_single_timings), 3))

    print('---')
    
    print('HiFlow (mean):', np.mean(hiflow_timings))
    print('HiFlow (max):', np.max(hiflow_timings))
    print('HiFlow (min):', np.min(hiflow_timings))
    print('HiFlow (std):', round(np.std(hiflow_timings), 3))
    

    x = [i for i in range(1, 2)]

    matplotlib.rc('xtick', labelsize=12) 
    matplotlib.rc('ytick', labelsize=14)

    fig = plt.figure(figsize=(17, 10))
    ax = plt.axes(frameon=False)
    
    # ax.axes.get_xaxis().set_visible(False)
    
    # plt.boxplot(box_data, labels=labels)

    plt.scatter([1]*len(predic_single_timings), predic_single_timings, alpha=0.5, linewidths=None)
    plt.scatter([2]*len(hiflow_timings), hiflow_timings, alpha=0.5, linewidths=None)

    plt.boxplot([predic_single_timings, hiflow_timings], labels=['Unet (single core)', ' Hiflow'], sym='')

    plt.gca().spines['top'].set_visible(False)
    plt.gca().spines['right'].set_visible(False)

    plt.xlabel('')
    plt.ylabel('Time pro iteration (s)')
    plt.title('Evaluation Time Performance', fontsize=17)

    plt.show()



if __name__ == '__main__':
    main()
